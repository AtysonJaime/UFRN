// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2020 13:19:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapathFIFO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapathFIFO_vlg_sample_tst(
	clk_fifo_dp,
	clr_fifo_dp,
	ld_rd_dp,
	ld_wr_dp,
	wr_data_dp,
	sampler_tx
);
input  clk_fifo_dp;
input  clr_fifo_dp;
input  ld_rd_dp;
input  ld_wr_dp;
input [12:0] wr_data_dp;
output sampler_tx;

reg sample;
time current_time;
always @(clk_fifo_dp or clr_fifo_dp or ld_rd_dp or ld_wr_dp or wr_data_dp)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapathFIFO_vlg_check_tst (
	contador_r,
	contador_w,
	eq_comp,
	rd_data_dp,
	sampler_rx
);
input [3:0] contador_r;
input [3:0] contador_w;
input  eq_comp;
input [12:0] rd_data_dp;
input sampler_rx;

reg [3:0] contador_r_expected;
reg [3:0] contador_w_expected;
reg  eq_comp_expected;
reg [12:0] rd_data_dp_expected;

reg [3:0] contador_r_prev;
reg [3:0] contador_w_prev;
reg  eq_comp_prev;
reg [12:0] rd_data_dp_prev;

reg [3:0] contador_r_expected_prev;
reg [3:0] contador_w_expected_prev;
reg  eq_comp_expected_prev;
reg [12:0] rd_data_dp_expected_prev;

reg [3:0] last_contador_r_exp;
reg [3:0] last_contador_w_exp;
reg  last_eq_comp_exp;
reg [12:0] last_rd_data_dp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	contador_r_prev = contador_r;
	contador_w_prev = contador_w;
	eq_comp_prev = eq_comp;
	rd_data_dp_prev = rd_data_dp;
end

// update expected /o prevs

always @(trigger)
begin
	contador_r_expected_prev = contador_r_expected;
	contador_w_expected_prev = contador_w_expected;
	eq_comp_expected_prev = eq_comp_expected;
	rd_data_dp_expected_prev = rd_data_dp_expected;
end


// expected rd_data_dp[ 12 ]
initial
begin
	rd_data_dp_expected[12] = 1'bX;
end 
// expected rd_data_dp[ 11 ]
initial
begin
	rd_data_dp_expected[11] = 1'bX;
end 
// expected rd_data_dp[ 10 ]
initial
begin
	rd_data_dp_expected[10] = 1'bX;
end 
// expected rd_data_dp[ 9 ]
initial
begin
	rd_data_dp_expected[9] = 1'bX;
end 
// expected rd_data_dp[ 8 ]
initial
begin
	rd_data_dp_expected[8] = 1'bX;
end 
// expected rd_data_dp[ 7 ]
initial
begin
	rd_data_dp_expected[7] = 1'bX;
end 
// expected rd_data_dp[ 6 ]
initial
begin
	rd_data_dp_expected[6] = 1'bX;
end 
// expected rd_data_dp[ 5 ]
initial
begin
	rd_data_dp_expected[5] = 1'bX;
end 
// expected rd_data_dp[ 4 ]
initial
begin
	rd_data_dp_expected[4] = 1'bX;
end 
// expected rd_data_dp[ 3 ]
initial
begin
	rd_data_dp_expected[3] = 1'bX;
end 
// expected rd_data_dp[ 2 ]
initial
begin
	rd_data_dp_expected[2] = 1'bX;
end 
// expected rd_data_dp[ 1 ]
initial
begin
	rd_data_dp_expected[1] = 1'bX;
end 
// expected rd_data_dp[ 0 ]
initial
begin
	rd_data_dp_expected[0] = 1'bX;
end 
// expected contador_r[ 3 ]
initial
begin
	contador_r_expected[3] = 1'bX;
end 
// expected contador_r[ 2 ]
initial
begin
	contador_r_expected[2] = 1'bX;
end 
// expected contador_r[ 1 ]
initial
begin
	contador_r_expected[1] = 1'bX;
end 
// expected contador_r[ 0 ]
initial
begin
	contador_r_expected[0] = 1'bX;
end 
// expected contador_w[ 3 ]
initial
begin
	contador_w_expected[3] = 1'bX;
end 
// expected contador_w[ 2 ]
initial
begin
	contador_w_expected[2] = 1'bX;
end 
// expected contador_w[ 1 ]
initial
begin
	contador_w_expected[1] = 1'bX;
end 
// expected contador_w[ 0 ]
initial
begin
	contador_w_expected[0] = 1'bX;
end 

// expected eq_comp
initial
begin
	eq_comp_expected = 1'bX;
end 
// generate trigger
always @(contador_r_expected or contador_r or contador_w_expected or contador_w or eq_comp_expected or eq_comp or rd_data_dp_expected or rd_data_dp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected contador_r = %b | expected contador_w = %b | expected eq_comp = %b | expected rd_data_dp = %b | ",contador_r_expected_prev,contador_w_expected_prev,eq_comp_expected_prev,rd_data_dp_expected_prev);
	$display("| real contador_r = %b | real contador_w = %b | real eq_comp = %b | real rd_data_dp = %b | ",contador_r_prev,contador_w_prev,eq_comp_prev,rd_data_dp_prev);
`endif
	if (
		( contador_r_expected_prev[0] !== 1'bx ) && ( contador_r_prev[0] !== contador_r_expected_prev[0] )
		&& ((contador_r_expected_prev[0] !== last_contador_r_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_r_expected_prev);
		$display ("     Real value = %b", contador_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_r_exp[0] = contador_r_expected_prev[0];
	end
	if (
		( contador_r_expected_prev[1] !== 1'bx ) && ( contador_r_prev[1] !== contador_r_expected_prev[1] )
		&& ((contador_r_expected_prev[1] !== last_contador_r_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_r_expected_prev);
		$display ("     Real value = %b", contador_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_r_exp[1] = contador_r_expected_prev[1];
	end
	if (
		( contador_r_expected_prev[2] !== 1'bx ) && ( contador_r_prev[2] !== contador_r_expected_prev[2] )
		&& ((contador_r_expected_prev[2] !== last_contador_r_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_r_expected_prev);
		$display ("     Real value = %b", contador_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_r_exp[2] = contador_r_expected_prev[2];
	end
	if (
		( contador_r_expected_prev[3] !== 1'bx ) && ( contador_r_prev[3] !== contador_r_expected_prev[3] )
		&& ((contador_r_expected_prev[3] !== last_contador_r_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_r_expected_prev);
		$display ("     Real value = %b", contador_r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_contador_r_exp[3] = contador_r_expected_prev[3];
	end
	if (
		( contador_w_expected_prev[0] !== 1'bx ) && ( contador_w_prev[0] !== contador_w_expected_prev[0] )
		&& ((contador_w_expected_prev[0] !== last_contador_w_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_w[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_w_expected_prev);
		$display ("     Real value = %b", contador_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_w_exp[0] = contador_w_expected_prev[0];
	end
	if (
		( contador_w_expected_prev[1] !== 1'bx ) && ( contador_w_prev[1] !== contador_w_expected_prev[1] )
		&& ((contador_w_expected_prev[1] !== last_contador_w_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_w[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_w_expected_prev);
		$display ("     Real value = %b", contador_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_w_exp[1] = contador_w_expected_prev[1];
	end
	if (
		( contador_w_expected_prev[2] !== 1'bx ) && ( contador_w_prev[2] !== contador_w_expected_prev[2] )
		&& ((contador_w_expected_prev[2] !== last_contador_w_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_w[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_w_expected_prev);
		$display ("     Real value = %b", contador_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_w_exp[2] = contador_w_expected_prev[2];
	end
	if (
		( contador_w_expected_prev[3] !== 1'bx ) && ( contador_w_prev[3] !== contador_w_expected_prev[3] )
		&& ((contador_w_expected_prev[3] !== last_contador_w_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador_w[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_w_expected_prev);
		$display ("     Real value = %b", contador_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_w_exp[3] = contador_w_expected_prev[3];
	end
	if (
		( eq_comp_expected_prev !== 1'bx ) && ( eq_comp_prev !== eq_comp_expected_prev )
		&& ((eq_comp_expected_prev !== last_eq_comp_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq_comp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq_comp_expected_prev);
		$display ("     Real value = %b", eq_comp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_eq_comp_exp = eq_comp_expected_prev;
	end
	if (
		( rd_data_dp_expected_prev[0] !== 1'bx ) && ( rd_data_dp_prev[0] !== rd_data_dp_expected_prev[0] )
		&& ((rd_data_dp_expected_prev[0] !== last_rd_data_dp_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[0] = rd_data_dp_expected_prev[0];
	end
	if (
		( rd_data_dp_expected_prev[1] !== 1'bx ) && ( rd_data_dp_prev[1] !== rd_data_dp_expected_prev[1] )
		&& ((rd_data_dp_expected_prev[1] !== last_rd_data_dp_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[1] = rd_data_dp_expected_prev[1];
	end
	if (
		( rd_data_dp_expected_prev[2] !== 1'bx ) && ( rd_data_dp_prev[2] !== rd_data_dp_expected_prev[2] )
		&& ((rd_data_dp_expected_prev[2] !== last_rd_data_dp_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[2] = rd_data_dp_expected_prev[2];
	end
	if (
		( rd_data_dp_expected_prev[3] !== 1'bx ) && ( rd_data_dp_prev[3] !== rd_data_dp_expected_prev[3] )
		&& ((rd_data_dp_expected_prev[3] !== last_rd_data_dp_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[3] = rd_data_dp_expected_prev[3];
	end
	if (
		( rd_data_dp_expected_prev[4] !== 1'bx ) && ( rd_data_dp_prev[4] !== rd_data_dp_expected_prev[4] )
		&& ((rd_data_dp_expected_prev[4] !== last_rd_data_dp_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[4] = rd_data_dp_expected_prev[4];
	end
	if (
		( rd_data_dp_expected_prev[5] !== 1'bx ) && ( rd_data_dp_prev[5] !== rd_data_dp_expected_prev[5] )
		&& ((rd_data_dp_expected_prev[5] !== last_rd_data_dp_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[5] = rd_data_dp_expected_prev[5];
	end
	if (
		( rd_data_dp_expected_prev[6] !== 1'bx ) && ( rd_data_dp_prev[6] !== rd_data_dp_expected_prev[6] )
		&& ((rd_data_dp_expected_prev[6] !== last_rd_data_dp_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[6] = rd_data_dp_expected_prev[6];
	end
	if (
		( rd_data_dp_expected_prev[7] !== 1'bx ) && ( rd_data_dp_prev[7] !== rd_data_dp_expected_prev[7] )
		&& ((rd_data_dp_expected_prev[7] !== last_rd_data_dp_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[7] = rd_data_dp_expected_prev[7];
	end
	if (
		( rd_data_dp_expected_prev[8] !== 1'bx ) && ( rd_data_dp_prev[8] !== rd_data_dp_expected_prev[8] )
		&& ((rd_data_dp_expected_prev[8] !== last_rd_data_dp_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[8] = rd_data_dp_expected_prev[8];
	end
	if (
		( rd_data_dp_expected_prev[9] !== 1'bx ) && ( rd_data_dp_prev[9] !== rd_data_dp_expected_prev[9] )
		&& ((rd_data_dp_expected_prev[9] !== last_rd_data_dp_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[9] = rd_data_dp_expected_prev[9];
	end
	if (
		( rd_data_dp_expected_prev[10] !== 1'bx ) && ( rd_data_dp_prev[10] !== rd_data_dp_expected_prev[10] )
		&& ((rd_data_dp_expected_prev[10] !== last_rd_data_dp_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[10] = rd_data_dp_expected_prev[10];
	end
	if (
		( rd_data_dp_expected_prev[11] !== 1'bx ) && ( rd_data_dp_prev[11] !== rd_data_dp_expected_prev[11] )
		&& ((rd_data_dp_expected_prev[11] !== last_rd_data_dp_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[11] = rd_data_dp_expected_prev[11];
	end
	if (
		( rd_data_dp_expected_prev[12] !== 1'bx ) && ( rd_data_dp_prev[12] !== rd_data_dp_expected_prev[12] )
		&& ((rd_data_dp_expected_prev[12] !== last_rd_data_dp_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_dp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_dp_expected_prev);
		$display ("     Real value = %b", rd_data_dp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rd_data_dp_exp[12] = rd_data_dp_expected_prev[12];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapathFIFO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_fifo_dp;
reg clr_fifo_dp;
reg ld_rd_dp;
reg ld_wr_dp;
reg [12:0] wr_data_dp;
// wires                                               
wire [3:0] contador_r;
wire [3:0] contador_w;
wire eq_comp;
wire [12:0] rd_data_dp;

wire sampler;                             

// assign statements (if any)                          
datapathFIFO i1 (
// port map - connection between master ports and signals/registers   
	.clk_fifo_dp(clk_fifo_dp),
	.clr_fifo_dp(clr_fifo_dp),
	.contador_r(contador_r),
	.contador_w(contador_w),
	.eq_comp(eq_comp),
	.ld_rd_dp(ld_rd_dp),
	.ld_wr_dp(ld_wr_dp),
	.rd_data_dp(rd_data_dp),
	.wr_data_dp(wr_data_dp)
);

// clk_fifo_dp
always
begin
	clk_fifo_dp = 1'b0;
	clk_fifo_dp = #20000 1'b1;
	#20000;
end 

// clr_fifo_dp
initial
begin
	clr_fifo_dp = 1'b0;
	clr_fifo_dp = #670000 1'b1;
	clr_fifo_dp = #40000 1'b0;
end 

// ld_rd_dp
initial
begin
	ld_rd_dp = 1'b0;
	ld_rd_dp = #310000 1'b1;
	ld_rd_dp = #140000 1'b0;
	ld_rd_dp = #80000 1'b1;
	ld_rd_dp = #30000 1'b0;
end 

// ld_wr_dp
initial
begin
	ld_wr_dp = 1'b0;
	ld_wr_dp = #80000 1'b1;
	ld_wr_dp = #30000 1'b0;
	ld_wr_dp = #60000 1'b1;
	ld_wr_dp = #30000 1'b0;
	ld_wr_dp = #50000 1'b1;
	ld_wr_dp = #30000 1'b0;
	ld_wr_dp = #210000 1'b1;
	ld_wr_dp = #30000 1'b0;
end 
// wr_data_dp[ 12 ]
initial
begin
	wr_data_dp[12] = 1'b0;
	wr_data_dp[12] = #80000 1'b1;
	wr_data_dp[12] = #30000 1'b0;
	wr_data_dp[12] = #60000 1'b1;
	wr_data_dp[12] = #30000 1'b0;
	wr_data_dp[12] = #50000 1'b1;
	wr_data_dp[12] = #30000 1'b0;
end 
// wr_data_dp[ 11 ]
initial
begin
	wr_data_dp[11] = 1'b0;
	wr_data_dp[11] = #80000 1'b1;
	wr_data_dp[11] = #30000 1'b0;
	wr_data_dp[11] = #60000 1'b1;
	wr_data_dp[11] = #30000 1'b0;
	wr_data_dp[11] = #50000 1'b1;
	wr_data_dp[11] = #30000 1'b0;
end 
// wr_data_dp[ 10 ]
initial
begin
	wr_data_dp[10] = 1'b0;
	wr_data_dp[10] = #80000 1'b1;
	wr_data_dp[10] = #30000 1'b0;
	wr_data_dp[10] = #60000 1'b1;
	wr_data_dp[10] = #30000 1'b0;
	wr_data_dp[10] = #50000 1'b1;
	wr_data_dp[10] = #30000 1'b0;
end 
// wr_data_dp[ 9 ]
initial
begin
	wr_data_dp[9] = 1'b0;
	wr_data_dp[9] = #80000 1'b1;
	wr_data_dp[9] = #30000 1'b0;
	wr_data_dp[9] = #60000 1'b1;
	wr_data_dp[9] = #30000 1'b0;
end 
// wr_data_dp[ 8 ]
initial
begin
	wr_data_dp[8] = 1'b0;
	wr_data_dp[8] = #80000 1'b1;
	wr_data_dp[8] = #30000 1'b0;
	wr_data_dp[8] = #60000 1'b1;
	wr_data_dp[8] = #30000 1'b0;
end 
// wr_data_dp[ 7 ]
initial
begin
	wr_data_dp[7] = 1'b1;
end 
// wr_data_dp[ 6 ]
initial
begin
	wr_data_dp[6] = 1'b0;
	wr_data_dp[6] = #250000 1'b1;
	wr_data_dp[6] = #30000 1'b0;
end 
// wr_data_dp[ 5 ]
initial
begin
	wr_data_dp[5] = 1'b0;
	wr_data_dp[5] = #170000 1'b1;
	wr_data_dp[5] = #30000 1'b0;
	wr_data_dp[5] = #50000 1'b1;
	wr_data_dp[5] = #30000 1'b0;
end 
// wr_data_dp[ 4 ]
initial
begin
	wr_data_dp[4] = 1'b0;
	wr_data_dp[4] = #170000 1'b1;
	wr_data_dp[4] = #30000 1'b0;
	wr_data_dp[4] = #50000 1'b1;
	wr_data_dp[4] = #30000 1'b0;
end 
// wr_data_dp[ 3 ]
initial
begin
	wr_data_dp[3] = 1'b0;
	wr_data_dp[3] = #170000 1'b1;
	wr_data_dp[3] = #30000 1'b0;
	wr_data_dp[3] = #50000 1'b1;
	wr_data_dp[3] = #30000 1'b0;
end 
// wr_data_dp[ 2 ]
initial
begin
	wr_data_dp[2] = 1'b0;
	wr_data_dp[2] = #170000 1'b1;
	wr_data_dp[2] = #30000 1'b0;
end 
// wr_data_dp[ 1 ]
initial
begin
	wr_data_dp[1] = 1'b0;
	wr_data_dp[1] = #250000 1'b1;
	wr_data_dp[1] = #30000 1'b0;
end 
// wr_data_dp[ 0 ]
initial
begin
	wr_data_dp[0] = 1'b0;
	wr_data_dp[0] = #250000 1'b1;
	wr_data_dp[0] = #30000 1'b0;
end 

datapathFIFO_vlg_sample_tst tb_sample (
	.clk_fifo_dp(clk_fifo_dp),
	.clr_fifo_dp(clr_fifo_dp),
	.ld_rd_dp(ld_rd_dp),
	.ld_wr_dp(ld_wr_dp),
	.wr_data_dp(wr_data_dp),
	.sampler_tx(sampler)
);

datapathFIFO_vlg_check_tst tb_out(
	.contador_r(contador_r),
	.contador_w(contador_w),
	.eq_comp(eq_comp),
	.rd_data_dp(rd_data_dp),
	.sampler_rx(sampler)
);
endmodule

