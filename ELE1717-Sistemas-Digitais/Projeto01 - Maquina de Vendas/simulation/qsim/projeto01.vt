// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2020 00:34:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto01_MV
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto01_MV_vlg_sample_tst(
	CLK_1,
	clock_27,
	KEY2,
	KEY3,
	SW,
	sampler_tx
);
input  CLK_1;
input  clock_27;
input  KEY2;
input  KEY3;
input [7:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_1 or clock_27 or KEY2 or KEY3 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto01_MV_vlg_check_tst (
	LEDR0,
	LEDR1,
	LHEX0,
	LHEX1,
	LHEX2,
	LHEX4,
	LHEX5,
	S_estados,
	sampler_rx
);
input  LEDR0;
input  LEDR1;
input [6:0] LHEX0;
input [6:0] LHEX1;
input [6:0] LHEX2;
input [6:0] LHEX4;
input [6:0] LHEX5;
input [1:0] S_estados;
input sampler_rx;

reg  LEDR0_expected;
reg  LEDR1_expected;
reg [6:0] LHEX0_expected;
reg [6:0] LHEX1_expected;
reg [6:0] LHEX2_expected;
reg [6:0] LHEX4_expected;
reg [6:0] LHEX5_expected;
reg [1:0] S_estados_expected;

reg  LEDR0_prev;
reg  LEDR1_prev;
reg [6:0] LHEX0_prev;
reg [6:0] LHEX1_prev;
reg [6:0] LHEX2_prev;
reg [6:0] LHEX4_prev;
reg [6:0] LHEX5_prev;
reg [1:0] S_estados_prev;

reg  LEDR0_expected_prev;
reg  LEDR1_expected_prev;
reg [6:0] LHEX0_expected_prev;
reg [6:0] LHEX1_expected_prev;
reg [6:0] LHEX2_expected_prev;
reg [6:0] LHEX4_expected_prev;
reg [6:0] LHEX5_expected_prev;

reg  last_LEDR0_exp;
reg  last_LEDR1_exp;
reg [6:0] last_LHEX0_exp;
reg [6:0] last_LHEX1_exp;
reg [6:0] last_LHEX2_exp;
reg [6:0] last_LHEX4_exp;
reg [6:0] last_LHEX5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDR0_prev = LEDR0;
	LEDR1_prev = LEDR1;
	LHEX0_prev = LHEX0;
	LHEX1_prev = LHEX1;
	LHEX2_prev = LHEX2;
	LHEX4_prev = LHEX4;
	LHEX5_prev = LHEX5;
	S_estados_prev = S_estados;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR0_expected_prev = LEDR0_expected;
	LEDR1_expected_prev = LEDR1_expected;
	LHEX0_expected_prev = LHEX0_expected;
	LHEX1_expected_prev = LHEX1_expected;
	LHEX2_expected_prev = LHEX2_expected;
	LHEX4_expected_prev = LHEX4_expected;
	LHEX5_expected_prev = LHEX5_expected;
end



// expected LEDR0
initial
begin
	LEDR0_expected = 1'bX;
end 

// expected LEDR1
initial
begin
	LEDR1_expected = 1'bX;
end 
// expected LHEX0[ 6 ]
initial
begin
	LHEX0_expected[6] = 1'bX;
end 
// expected LHEX0[ 5 ]
initial
begin
	LHEX0_expected[5] = 1'bX;
end 
// expected LHEX0[ 4 ]
initial
begin
	LHEX0_expected[4] = 1'bX;
end 
// expected LHEX0[ 3 ]
initial
begin
	LHEX0_expected[3] = 1'bX;
end 
// expected LHEX0[ 2 ]
initial
begin
	LHEX0_expected[2] = 1'bX;
end 
// expected LHEX0[ 1 ]
initial
begin
	LHEX0_expected[1] = 1'bX;
end 
// expected LHEX0[ 0 ]
initial
begin
	LHEX0_expected[0] = 1'bX;
end 
// expected LHEX1[ 6 ]
initial
begin
	LHEX1_expected[6] = 1'bX;
end 
// expected LHEX1[ 5 ]
initial
begin
	LHEX1_expected[5] = 1'bX;
end 
// expected LHEX1[ 4 ]
initial
begin
	LHEX1_expected[4] = 1'bX;
end 
// expected LHEX1[ 3 ]
initial
begin
	LHEX1_expected[3] = 1'bX;
end 
// expected LHEX1[ 2 ]
initial
begin
	LHEX1_expected[2] = 1'bX;
end 
// expected LHEX1[ 1 ]
initial
begin
	LHEX1_expected[1] = 1'bX;
end 
// expected LHEX1[ 0 ]
initial
begin
	LHEX1_expected[0] = 1'bX;
end 
// expected LHEX2[ 6 ]
initial
begin
	LHEX2_expected[6] = 1'bX;
end 
// expected LHEX2[ 5 ]
initial
begin
	LHEX2_expected[5] = 1'bX;
end 
// expected LHEX2[ 4 ]
initial
begin
	LHEX2_expected[4] = 1'bX;
end 
// expected LHEX2[ 3 ]
initial
begin
	LHEX2_expected[3] = 1'bX;
end 
// expected LHEX2[ 2 ]
initial
begin
	LHEX2_expected[2] = 1'bX;
end 
// expected LHEX2[ 1 ]
initial
begin
	LHEX2_expected[1] = 1'bX;
end 
// expected LHEX2[ 0 ]
initial
begin
	LHEX2_expected[0] = 1'bX;
end 
// expected LHEX4[ 6 ]
initial
begin
	LHEX4_expected[6] = 1'bX;
end 
// expected LHEX4[ 5 ]
initial
begin
	LHEX4_expected[5] = 1'bX;
end 
// expected LHEX4[ 4 ]
initial
begin
	LHEX4_expected[4] = 1'bX;
end 
// expected LHEX4[ 3 ]
initial
begin
	LHEX4_expected[3] = 1'bX;
end 
// expected LHEX4[ 2 ]
initial
begin
	LHEX4_expected[2] = 1'bX;
end 
// expected LHEX4[ 1 ]
initial
begin
	LHEX4_expected[1] = 1'bX;
end 
// expected LHEX4[ 0 ]
initial
begin
	LHEX4_expected[0] = 1'bX;
end 
// expected LHEX5[ 6 ]
initial
begin
	LHEX5_expected[6] = 1'bX;
end 
// expected LHEX5[ 5 ]
initial
begin
	LHEX5_expected[5] = 1'bX;
end 
// expected LHEX5[ 4 ]
initial
begin
	LHEX5_expected[4] = 1'bX;
end 
// expected LHEX5[ 3 ]
initial
begin
	LHEX5_expected[3] = 1'bX;
end 
// expected LHEX5[ 2 ]
initial
begin
	LHEX5_expected[2] = 1'bX;
end 
// expected LHEX5[ 1 ]
initial
begin
	LHEX5_expected[1] = 1'bX;
end 
// expected LHEX5[ 0 ]
initial
begin
	LHEX5_expected[0] = 1'bX;
end 
// generate trigger
always @(LEDR0_expected or LEDR0 or LEDR1_expected or LEDR1 or LHEX0_expected or LHEX0 or LHEX1_expected or LHEX1 or LHEX2_expected or LHEX2 or LHEX4_expected or LHEX4 or LHEX5_expected or LHEX5 or S_estados_expected or S_estados)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDR0 = %b | expected LEDR1 = %b | expected LHEX0 = %b | expected LHEX1 = %b | expected LHEX2 = %b | expected LHEX4 = %b | expected LHEX5 = %b | expected S_estados = %b | ",LEDR0_expected_prev,LEDR1_expected_prev,LHEX0_expected_prev,LHEX1_expected_prev,LHEX2_expected_prev,LHEX4_expected_prev,LHEX5_expected_prev,S_estados_expected_prev);
	$display("| real LEDR0 = %b | real LEDR1 = %b | real LHEX0 = %b | real LHEX1 = %b | real LHEX2 = %b | real LHEX4 = %b | real LHEX5 = %b | real S_estados = %b | ",LEDR0_prev,LEDR1_prev,LHEX0_prev,LHEX1_prev,LHEX2_prev,LHEX4_prev,LHEX5_prev,S_estados_prev);
`endif
	if (
		( LEDR0_expected_prev !== 1'bx ) && ( LEDR0_prev !== LEDR0_expected_prev )
		&& ((LEDR0_expected_prev !== last_LEDR0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR0_expected_prev);
		$display ("     Real value = %b", LEDR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDR0_exp = LEDR0_expected_prev;
	end
	if (
		( LEDR1_expected_prev !== 1'bx ) && ( LEDR1_prev !== LEDR1_expected_prev )
		&& ((LEDR1_expected_prev !== last_LEDR1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR1_expected_prev);
		$display ("     Real value = %b", LEDR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDR1_exp = LEDR1_expected_prev;
	end
	if (
		( LHEX0_expected_prev[0] !== 1'bx ) && ( LHEX0_prev[0] !== LHEX0_expected_prev[0] )
		&& ((LHEX0_expected_prev[0] !== last_LHEX0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[0] = LHEX0_expected_prev[0];
	end
	if (
		( LHEX0_expected_prev[1] !== 1'bx ) && ( LHEX0_prev[1] !== LHEX0_expected_prev[1] )
		&& ((LHEX0_expected_prev[1] !== last_LHEX0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[1] = LHEX0_expected_prev[1];
	end
	if (
		( LHEX0_expected_prev[2] !== 1'bx ) && ( LHEX0_prev[2] !== LHEX0_expected_prev[2] )
		&& ((LHEX0_expected_prev[2] !== last_LHEX0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[2] = LHEX0_expected_prev[2];
	end
	if (
		( LHEX0_expected_prev[3] !== 1'bx ) && ( LHEX0_prev[3] !== LHEX0_expected_prev[3] )
		&& ((LHEX0_expected_prev[3] !== last_LHEX0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[3] = LHEX0_expected_prev[3];
	end
	if (
		( LHEX0_expected_prev[4] !== 1'bx ) && ( LHEX0_prev[4] !== LHEX0_expected_prev[4] )
		&& ((LHEX0_expected_prev[4] !== last_LHEX0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[4] = LHEX0_expected_prev[4];
	end
	if (
		( LHEX0_expected_prev[5] !== 1'bx ) && ( LHEX0_prev[5] !== LHEX0_expected_prev[5] )
		&& ((LHEX0_expected_prev[5] !== last_LHEX0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[5] = LHEX0_expected_prev[5];
	end
	if (
		( LHEX0_expected_prev[6] !== 1'bx ) && ( LHEX0_prev[6] !== LHEX0_expected_prev[6] )
		&& ((LHEX0_expected_prev[6] !== last_LHEX0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX0_expected_prev);
		$display ("     Real value = %b", LHEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LHEX0_exp[6] = LHEX0_expected_prev[6];
	end
	if (
		( LHEX1_expected_prev[0] !== 1'bx ) && ( LHEX1_prev[0] !== LHEX1_expected_prev[0] )
		&& ((LHEX1_expected_prev[0] !== last_LHEX1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[0] = LHEX1_expected_prev[0];
	end
	if (
		( LHEX1_expected_prev[1] !== 1'bx ) && ( LHEX1_prev[1] !== LHEX1_expected_prev[1] )
		&& ((LHEX1_expected_prev[1] !== last_LHEX1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[1] = LHEX1_expected_prev[1];
	end
	if (
		( LHEX1_expected_prev[2] !== 1'bx ) && ( LHEX1_prev[2] !== LHEX1_expected_prev[2] )
		&& ((LHEX1_expected_prev[2] !== last_LHEX1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[2] = LHEX1_expected_prev[2];
	end
	if (
		( LHEX1_expected_prev[3] !== 1'bx ) && ( LHEX1_prev[3] !== LHEX1_expected_prev[3] )
		&& ((LHEX1_expected_prev[3] !== last_LHEX1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[3] = LHEX1_expected_prev[3];
	end
	if (
		( LHEX1_expected_prev[4] !== 1'bx ) && ( LHEX1_prev[4] !== LHEX1_expected_prev[4] )
		&& ((LHEX1_expected_prev[4] !== last_LHEX1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[4] = LHEX1_expected_prev[4];
	end
	if (
		( LHEX1_expected_prev[5] !== 1'bx ) && ( LHEX1_prev[5] !== LHEX1_expected_prev[5] )
		&& ((LHEX1_expected_prev[5] !== last_LHEX1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[5] = LHEX1_expected_prev[5];
	end
	if (
		( LHEX1_expected_prev[6] !== 1'bx ) && ( LHEX1_prev[6] !== LHEX1_expected_prev[6] )
		&& ((LHEX1_expected_prev[6] !== last_LHEX1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX1_expected_prev);
		$display ("     Real value = %b", LHEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LHEX1_exp[6] = LHEX1_expected_prev[6];
	end
	if (
		( LHEX2_expected_prev[0] !== 1'bx ) && ( LHEX2_prev[0] !== LHEX2_expected_prev[0] )
		&& ((LHEX2_expected_prev[0] !== last_LHEX2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[0] = LHEX2_expected_prev[0];
	end
	if (
		( LHEX2_expected_prev[1] !== 1'bx ) && ( LHEX2_prev[1] !== LHEX2_expected_prev[1] )
		&& ((LHEX2_expected_prev[1] !== last_LHEX2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[1] = LHEX2_expected_prev[1];
	end
	if (
		( LHEX2_expected_prev[2] !== 1'bx ) && ( LHEX2_prev[2] !== LHEX2_expected_prev[2] )
		&& ((LHEX2_expected_prev[2] !== last_LHEX2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[2] = LHEX2_expected_prev[2];
	end
	if (
		( LHEX2_expected_prev[3] !== 1'bx ) && ( LHEX2_prev[3] !== LHEX2_expected_prev[3] )
		&& ((LHEX2_expected_prev[3] !== last_LHEX2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[3] = LHEX2_expected_prev[3];
	end
	if (
		( LHEX2_expected_prev[4] !== 1'bx ) && ( LHEX2_prev[4] !== LHEX2_expected_prev[4] )
		&& ((LHEX2_expected_prev[4] !== last_LHEX2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[4] = LHEX2_expected_prev[4];
	end
	if (
		( LHEX2_expected_prev[5] !== 1'bx ) && ( LHEX2_prev[5] !== LHEX2_expected_prev[5] )
		&& ((LHEX2_expected_prev[5] !== last_LHEX2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[5] = LHEX2_expected_prev[5];
	end
	if (
		( LHEX2_expected_prev[6] !== 1'bx ) && ( LHEX2_prev[6] !== LHEX2_expected_prev[6] )
		&& ((LHEX2_expected_prev[6] !== last_LHEX2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX2_expected_prev);
		$display ("     Real value = %b", LHEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LHEX2_exp[6] = LHEX2_expected_prev[6];
	end
	if (
		( LHEX4_expected_prev[0] !== 1'bx ) && ( LHEX4_prev[0] !== LHEX4_expected_prev[0] )
		&& ((LHEX4_expected_prev[0] !== last_LHEX4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[0] = LHEX4_expected_prev[0];
	end
	if (
		( LHEX4_expected_prev[1] !== 1'bx ) && ( LHEX4_prev[1] !== LHEX4_expected_prev[1] )
		&& ((LHEX4_expected_prev[1] !== last_LHEX4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[1] = LHEX4_expected_prev[1];
	end
	if (
		( LHEX4_expected_prev[2] !== 1'bx ) && ( LHEX4_prev[2] !== LHEX4_expected_prev[2] )
		&& ((LHEX4_expected_prev[2] !== last_LHEX4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[2] = LHEX4_expected_prev[2];
	end
	if (
		( LHEX4_expected_prev[3] !== 1'bx ) && ( LHEX4_prev[3] !== LHEX4_expected_prev[3] )
		&& ((LHEX4_expected_prev[3] !== last_LHEX4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[3] = LHEX4_expected_prev[3];
	end
	if (
		( LHEX4_expected_prev[4] !== 1'bx ) && ( LHEX4_prev[4] !== LHEX4_expected_prev[4] )
		&& ((LHEX4_expected_prev[4] !== last_LHEX4_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[4] = LHEX4_expected_prev[4];
	end
	if (
		( LHEX4_expected_prev[5] !== 1'bx ) && ( LHEX4_prev[5] !== LHEX4_expected_prev[5] )
		&& ((LHEX4_expected_prev[5] !== last_LHEX4_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[5] = LHEX4_expected_prev[5];
	end
	if (
		( LHEX4_expected_prev[6] !== 1'bx ) && ( LHEX4_prev[6] !== LHEX4_expected_prev[6] )
		&& ((LHEX4_expected_prev[6] !== last_LHEX4_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX4_expected_prev);
		$display ("     Real value = %b", LHEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LHEX4_exp[6] = LHEX4_expected_prev[6];
	end
	if (
		( LHEX5_expected_prev[0] !== 1'bx ) && ( LHEX5_prev[0] !== LHEX5_expected_prev[0] )
		&& ((LHEX5_expected_prev[0] !== last_LHEX5_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[0] = LHEX5_expected_prev[0];
	end
	if (
		( LHEX5_expected_prev[1] !== 1'bx ) && ( LHEX5_prev[1] !== LHEX5_expected_prev[1] )
		&& ((LHEX5_expected_prev[1] !== last_LHEX5_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[1] = LHEX5_expected_prev[1];
	end
	if (
		( LHEX5_expected_prev[2] !== 1'bx ) && ( LHEX5_prev[2] !== LHEX5_expected_prev[2] )
		&& ((LHEX5_expected_prev[2] !== last_LHEX5_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[2] = LHEX5_expected_prev[2];
	end
	if (
		( LHEX5_expected_prev[3] !== 1'bx ) && ( LHEX5_prev[3] !== LHEX5_expected_prev[3] )
		&& ((LHEX5_expected_prev[3] !== last_LHEX5_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[3] = LHEX5_expected_prev[3];
	end
	if (
		( LHEX5_expected_prev[4] !== 1'bx ) && ( LHEX5_prev[4] !== LHEX5_expected_prev[4] )
		&& ((LHEX5_expected_prev[4] !== last_LHEX5_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[4] = LHEX5_expected_prev[4];
	end
	if (
		( LHEX5_expected_prev[5] !== 1'bx ) && ( LHEX5_prev[5] !== LHEX5_expected_prev[5] )
		&& ((LHEX5_expected_prev[5] !== last_LHEX5_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[5] = LHEX5_expected_prev[5];
	end
	if (
		( LHEX5_expected_prev[6] !== 1'bx ) && ( LHEX5_prev[6] !== LHEX5_expected_prev[6] )
		&& ((LHEX5_expected_prev[6] !== last_LHEX5_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LHEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LHEX5_expected_prev);
		$display ("     Real value = %b", LHEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LHEX5_exp[6] = LHEX5_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto01_MV_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_1;
reg clock_27;
reg KEY2;
reg KEY3;
reg [7:0] SW;
// wires                                               
wire LEDR0;
wire LEDR1;
wire [6:0] LHEX0;
wire [6:0] LHEX1;
wire [6:0] LHEX2;
wire [6:0] LHEX4;
wire [6:0] LHEX5;
wire [1:0] S_estados;

wire sampler;                             

// assign statements (if any)                          
projeto01_MV i1 (
// port map - connection between master ports and signals/registers   
	.CLK_1(CLK_1),
	.clock_27(clock_27),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.LEDR0(LEDR0),
	.LEDR1(LEDR1),
	.LHEX0(LHEX0),
	.LHEX1(LHEX1),
	.LHEX2(LHEX2),
	.LHEX4(LHEX4),
	.LHEX5(LHEX5),
	.S_estados(S_estados),
	.SW(SW)
);

// CLK_1
always
begin
	CLK_1 = 1'b0;
	CLK_1 = #10000 1'b1;
	#10000;
end 

// clock_27
initial
begin
	clock_27 = 1'b0;
end 

// KEY2
initial
begin
	KEY2 = 1'b0;
	KEY2 = #20000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #60000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #40000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #50000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #50000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #50000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #70000 1'b1;
	KEY2 = #20000 1'b0;
	KEY2 = #270000 1'b1;
	KEY2 = #10000 1'b0;
	KEY2 = #20000 1'b1;
	# 20000;
	repeat(2)
	begin
		KEY2 = 1'b0;
		KEY2 = #20000 1'b1;
		# 20000;
	end
	KEY2 = 1'b0;
	KEY2 = #110000 1'b1;
end 

// KEY3
initial
begin
	KEY3 = 1'b0;
	KEY3 = #640000 1'b1;
	KEY3 = #50000 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b1;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

projeto01_MV_vlg_sample_tst tb_sample (
	.CLK_1(CLK_1),
	.clock_27(clock_27),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.SW(SW),
	.sampler_tx(sampler)
);

projeto01_MV_vlg_check_tst tb_out(
	.LEDR0(LEDR0),
	.LEDR1(LEDR1),
	.LHEX0(LHEX0),
	.LHEX1(LHEX1),
	.LHEX2(LHEX2),
	.LHEX4(LHEX4),
	.LHEX5(LHEX5),
	.S_estados(S_estados),
	.sampler_rx(sampler)
);
endmodule

